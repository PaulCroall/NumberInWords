package by.paul.croall;

public class Number implements IGetAsWords
{
	
	public Number()
	{	
		hi = new HunTenUnits( MILLION );
		mid = new HunTenUnits( THOUSAND );
		lo = new HunTenUnits();
	}

	private final static String MILLION = "million ";
	private final static String THOUSAND = "thousand ";

	private final static String ZERO = "zero";
	
	private final static String AND = "and ";
	
	private HunTenUnits hi, mid, lo;
	
	public String getAsWords( int no )
	{
		if ( no == 0 )
			return( ZERO );
		
		String leftAnd = "", rightAnd = "";
		
		verifyRange( 1, no, 999999999 );

		String hiStr = hi.getAsWords( no / 1000000 );
		String midStr = mid.getAsWords( ( no / 1000 ) % 1000 );
		String loStr = lo.getAsWords( no % 1000 );
		
		if ( ( hiStr != null || midStr != null ) && loStr != null && no % 1000 < 100 )
			rightAnd = AND;
		else
			if ( hiStr != null && ( midStr != null || loStr != null ) && ( no / 1000 ) % 1000 < 100 && no % 1000 < 100 )
				leftAnd = AND;
			
		hiStr = nullsToBlank( hiStr );
		midStr = nullsToBlank( midStr );
		loStr = nullsToBlank( loStr );
		
		return( trim( hiStr + leftAnd + midStr + rightAnd + loStr ) );
	}
	
	private void verifyRange( int min, int actual, int max )
	{
		if ( min > actual || actual > max )
			throw new RuntimeException( "Out of range, required that " + min  + " <= " + actual + " <= " + max );
	}
	
	private String nullsToBlank( String string )
	{
		return( string == null ? "" : string );
	}
	
	private String trim( String str )
	{
		int len;
		
		if ( str!=null && (len=str.length()) > 0 && str.charAt( --len ) == ' ' )
			str = str.substring( 0, len - 1 );
		
		return( str );
	}
}
